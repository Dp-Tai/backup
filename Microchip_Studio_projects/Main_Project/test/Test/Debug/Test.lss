
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000605  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000761  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	06 d0       	rcall	.+12     	; 0x40 <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z12uart_char_txh>:
#include <avr/io.h>
#include <avr/delay.h>

//chuong trinh con phat du lieu
void uart_char_tx(unsigned char chr){
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1
  38:	5d 9b       	sbis	0x0b, 5	; 11
  3a:	fe cf       	rjmp	.-4      	; 0x38 <_Z12uart_char_txh>
	UDR=chr;
  3c:	8c b9       	out	0x0c, r24	; 12
  3e:	08 95       	ret

00000040 <main>:
}

int main(void){
	//set baud, 57.6k ung voi f=8Mhz, xem bang 70 trang 165, Atmega32 datasheet
	UBRRH=0;
  40:	10 bc       	out	0x20, r1	; 32
	UBRRL=77;
  42:	8d e4       	ldi	r24, 0x4D	; 77
  44:	89 b9       	out	0x09, r24	; 9
	
	//set khung truyen va kich hoat bo nhan du lieu
	UCSRA=0x00;
  46:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  48:	86 e8       	ldi	r24, 0x86	; 134
  4a:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN);
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	8a b9       	out	0x0a, r24	; 10
	
	while(1){
		for (char i=32; i<128; i++){
  50:	c0 e2       	ldi	r28, 0x20	; 32
  52:	cc 23       	and	r28, r28
  54:	ec f3       	brlt	.-6      	; 0x50 <main+0x10>
			uart_char_tx(50);    //phat du lieu
  56:	82 e3       	ldi	r24, 0x32	; 50
  58:	ef df       	rcall	.-34     	; 0x38 <_Z12uart_char_txh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	2f ef       	ldi	r18, 0xFF	; 255
  5c:	8e e9       	ldi	r24, 0x9E	; 158
  5e:	94 e2       	ldi	r25, 0x24	; 36
  60:	21 50       	subi	r18, 0x01	; 1
  62:	80 40       	sbci	r24, 0x00	; 0
  64:	90 40       	sbci	r25, 0x00	; 0
  66:	e1 f7       	brne	.-8      	; 0x60 <main+0x20>
  68:	00 c0       	rjmp	.+0      	; 0x6a <main+0x2a>
  6a:	00 00       	nop
	UCSRA=0x00;
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
	UCSRB=(1<<TXEN);
	
	while(1){
		for (char i=32; i<128; i++){
  6c:	cf 5f       	subi	r28, 0xFF	; 255
  6e:	f1 cf       	rjmp	.-30     	; 0x52 <main+0x12>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
