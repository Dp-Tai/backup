
Node_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000604  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053a  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000271  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000324  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	11 d0       	rcall	.+34     	; 0x66 <main>
  44:	45 c0       	rjmp	.+138    	; 0xd0 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <gpio_init>:
	uart_init();
}

void gpio_init()
{
	DDRC = 3;
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	84 bb       	out	0x14, r24	; 20
  4c:	08 95       	ret

0000004e <uart_init>:
}

void uart_init()
{
	//set baud, 57.6k ung voi f=8Mhz, xem bang 70 trang 165, Atmega32 datasheet
	UBRRH=0;
  4e:	10 bc       	out	0x20, r1	; 32
	UBRRL=47;
  50:	8f e2       	ldi	r24, 0x2F	; 47
  52:	89 b9       	out	0x09, r24	; 9
	//set khung truyen va kich hoat bo nhan du lieu
	UCSRA=0x00;
  54:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  56:	86 e8       	ldi	r24, 0x86	; 134
  58:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);//cho phep ca 2 qua trinh nhan va//truyen, va cho  phep ngat sau khi nhan xong	
  5a:	88 e9       	ldi	r24, 0x98	; 152
  5c:	8a b9       	out	0x0a, r24	; 10
  5e:	08 95       	ret

00000060 <init>:
	}
}

void init()
{
	gpio_init();
  60:	f3 df       	rcall	.-26     	; 0x48 <gpio_init>
	uart_init();
  62:	f5 df       	rcall	.-22     	; 0x4e <uart_init>
  64:	08 95       	ret

00000066 <main>:

volatile unsigned char uart_data;

int main(void){
	
	__Enable_All_Interrupt__
  66:	78 94       	sei
	init();
  68:	fb df       	rcall	.-10     	; 0x60 <init>
  6a:	ff cf       	rjmp	.-2      	; 0x6a <main+0x4>

0000006c <uart_char_tx>:
	UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);//cho phep ca 2 qua trinh nhan va//truyen, va cho  phep ngat sau khi nhan xong	
}

//chuong trinh con phat du lieu
void uart_char_tx(unsigned char chr){
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <uart_char_tx>
	UDR=chr;
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <Uart_receive_interrupt_func>:
}


void Uart_receive_interrupt_func()
{
		uart_data=UDR;		
  74:	8c b1       	in	r24, 0x0c	; 12
  76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC ^= 0x0f;
  7a:	95 b3       	in	r25, 0x15	; 21
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
  82:	08 95       	ret

00000084 <__vector_11>:
}

ISR(USART_RXC_vect){
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	2f 93       	push	r18
  90:	3f 93       	push	r19
  92:	4f 93       	push	r20
  94:	5f 93       	push	r21
  96:	6f 93       	push	r22
  98:	7f 93       	push	r23
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	Uart_receive_interrupt_func();
  a6:	e6 df       	rcall	.-52     	; 0x74 <Uart_receive_interrupt_func>
	uart_char_tx(uart_data);
  a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ac:	df df       	rcall	.-66     	; 0x6c <uart_char_tx>
  ae:	ff 91       	pop	r31
  b0:	ef 91       	pop	r30
  b2:	bf 91       	pop	r27
  b4:	af 91       	pop	r26
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	7f 91       	pop	r23
  bc:	6f 91       	pop	r22
  be:	5f 91       	pop	r21
  c0:	4f 91       	pop	r20
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
